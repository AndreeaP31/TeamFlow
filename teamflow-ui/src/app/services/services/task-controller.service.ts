/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createTask } from '../fn/task-controller/create-task';
import { CreateTask$Params } from '../fn/task-controller/create-task';
import { getByProject } from '../fn/task-controller/get-by-project';
import { GetByProject$Params } from '../fn/task-controller/get-by-project';
import { getMyTasks } from '../fn/task-controller/get-my-tasks';
import { GetMyTasks$Params } from '../fn/task-controller/get-my-tasks';
import { Task } from '../models/task';

@Injectable({ providedIn: 'root' })
export class TaskControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createTask()` */
  static readonly CreateTaskPath = '/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTask$Response(params: CreateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return createTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTask(params: CreateTask$Params, context?: HttpContext): Observable<Task> {
    return this.createTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `getByProject()` */
  static readonly GetByProjectPath = '/tasks/project/{projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getByProject()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByProject$Response(params: GetByProject$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {
    return getByProject(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getByProject$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getByProject(params: GetByProject$Params, context?: HttpContext): Observable<Array<Task>> {
    return this.getByProject$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)
    );
  }

  /** Path part for operation `getMyTasks()` */
  static readonly GetMyTasksPath = '/tasks/my';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTasks$Response(params?: GetMyTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {
    return getMyTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTasks(params?: GetMyTasks$Params, context?: HttpContext): Observable<Array<Task>> {
    return this.getMyTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)
    );
  }

}
